// ======================================================================
// \title  ManyChoicesArrayAc.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for ManyChoices array
// ======================================================================

#ifndef Ref_ManyChoicesArrayAc_HPP
#define Ref_ManyChoicesArrayAc_HPP

#include <initializer_list>

#include "Fw/FPrimeBasicTypes.hpp"
#include "Fw/Types/ExternalString.hpp"
#include "Fw/Types/Serializable.hpp"
#include "Fw/Types/String.hpp"
#include "Ref/TypeDemo/ChoiceEnumAc.hpp"

namespace Ref {

  //! Enumeration array
  class ManyChoices :
    public Fw::Serializable
  {

    public:

      // ----------------------------------------------------------------------
      // Types
      // ----------------------------------------------------------------------

      //! The element type
      using ElementType = Ref::Choice;

    public:

      // ----------------------------------------------------------------------
      // Constants
      // ----------------------------------------------------------------------

      enum {
        //! The size of the array
        SIZE = 2,
        //! The serialized size of each element
        ELEMENT_SERIALIZED_SIZE = Ref::Choice::SERIALIZED_SIZE,
        //! The size of the serial representation
        SERIALIZED_SIZE = SIZE * ELEMENT_SERIALIZED_SIZE
      };

    public:

      // ----------------------------------------------------------------------
      // Constructors
      // ----------------------------------------------------------------------

      //! Constructor (default value)
      ManyChoices();

      //! Constructor (primitive array)
      ManyChoices(
          const ElementType (&a)[SIZE] //!< The array
      );

      //! Constructor (single element)
      explicit ManyChoices(
          const ElementType& e //!< The element
      );

      //! Constructor (initializer list)
      ManyChoices(
          const std::initializer_list<ElementType>& il //!< The initializer list
      );

      //! Copy constructor
      ManyChoices(
          const ManyChoices& obj //!< The source object
      );

    public:

      // ----------------------------------------------------------------------
      // Operators
      // ----------------------------------------------------------------------

      //! Subscript operator
      ElementType& operator[](
          const FwSizeType i //!< The subscript index
      );

      //! Const subscript operator
      const ElementType& operator[](
          const FwSizeType i //!< The subscript index
      ) const;

      //! Copy assignment operator (object)
      ManyChoices& operator=(
          const ManyChoices& obj //!< The source object
      );

      //! Copy assignment operator (primitive array)
      ManyChoices& operator=(
          const ElementType (&a)[SIZE] //!< The source array
      );

      //! Copy assignment operator (initializer list)
      ManyChoices& operator=(
          const std::initializer_list<ElementType>& il //!< The initializer list
      );

      //! Copy assignment operator (single element)
      ManyChoices& operator=(
          const ElementType& e //!< The element
      );

      //! Equality operator
      bool operator==(
          const ManyChoices& obj //!< The other object
      ) const;

      //! Inequality operator
      bool operator!=(
          const ManyChoices& obj //!< The other object
      ) const;

#ifdef BUILD_UT

      //! Ostream operator
      friend std::ostream& operator<<(
          std::ostream& os, //!< The ostream
          const ManyChoices& obj //!< The object
      );

#endif

    public:

      // ----------------------------------------------------------------------
      // Public member functions
      // ----------------------------------------------------------------------

      //! Serialization
      Fw::SerializeStatus serializeTo(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      ) const;

      //! Deserialization
      Fw::SerializeStatus deserializeFrom(
          Fw::SerializeBufferBase& buffer //!< The serial buffer
      );

      //! Get the dynamic serialized size of the array
      FwSizeType serializedSize() const;

#if FW_SERIALIZABLE_TO_STRING

      //! Convert array to string
      void toString(
          Fw::StringBase& sb //!< The StringBase object to hold the result
      ) const;

#endif

    private:

      // ----------------------------------------------------------------------
      // Member variables
      // ----------------------------------------------------------------------

      //! The array elements
      ElementType elements[SIZE];

  };

}

#endif
